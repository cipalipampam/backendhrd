generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model departemen {
  id        String     @id
  nama      String     @unique(map: "Departemen_nama_key")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  karyawan  karyawan[] @relation("departemenonkaryawan")
}

model featuresnapshot {
  id             String       @id
  karyawanId     String
  features       Json
  modelVersionId String
  createdAt      DateTime     @default(now())
  modelversion   modelversion @relation(fields: [modelVersionId], references: [id], map: "FeatureSnapshot_modelVersionId_fkey")

  @@index([modelVersionId], map: "FeatureSnapshot_modelVersionId_fkey")
}

model jabatan {
  id        String     @id
  nama      String     @unique(map: "Jabatan_nama_key")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  karyawan  karyawan[] @relation("jabatanonkaryawan")
}

model karyawan {
  id              String            @id
  nama            String
  gender          karyawan_gender
  alamat          String?
  no_telp         String?
  tanggal_lahir   DateTime?
  pendidikan      String
  tanggal_masuk   DateTime
  jalur_rekrut    String
  userId          String            @unique(map: "Karyawan_userId_key")
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  user            user              @relation(fields: [userId], references: [username], map: "Karyawan_userId_fkey")
  kpi             kpi[]
  pelatihandetail pelatihandetail[]
  rating          rating[]
  departemen      departemen[]      @relation("departemenonkaryawan")
  jabatan         jabatan[]         @relation("jabatanonkaryawan")
  penghargaan     penghargaan[]     @relation("penghargaanonkaryawan")
}

model kpi {
  id         String   @id
  year       Int
  score      Float
  notes      String?
  karyawanId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  karyawan   karyawan @relation(fields: [karyawanId], references: [id], map: "KPI_karyawanId_fkey")

  @@unique([karyawanId, year], map: "KPI_karyawanId_year_key")
}

model modelversion {
  id                      String                    @id
  name                    String
  version                 Int
  type                    String
  storagePath             String
  metrics                 Json?
  createdAt               DateTime                  @default(now())
  featuresnapshot         featuresnapshot[]
  promotionrecommendation promotionrecommendation[]
}

model pelatihan {
  id              String            @id
  nama            String
  tanggal         DateTime
  lokasi          String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  pelatihandetail pelatihandetail[]
}

model pelatihandetail {
  id          String    @id
  pelatihanId String
  karyawanId  String
  skor        Float?
  catatan     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime
  karyawan    karyawan  @relation(fields: [karyawanId], references: [id], map: "PelatihanDetail_karyawanId_fkey")
  pelatihan   pelatihan @relation(fields: [pelatihanId], references: [id], map: "PelatihanDetail_pelatihanId_fkey")

  @@unique([pelatihanId, karyawanId], map: "PelatihanDetail_pelatihanId_karyawanId_key")
  @@index([karyawanId], map: "PelatihanDetail_karyawanId_fkey")
}

model penghargaan {
  id        String     @id
  nama      String
  tahun     DateTime
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  karyawan  karyawan[] @relation("penghargaanonkaryawan")
}

model promotionrecommendation {
  id             String       @id
  karyawanId     String
  modelVersionId String
  score          Float
  recommend      Boolean
  reasons        Json?
  createdAt      DateTime     @default(now())
  modelversion   modelversion @relation(fields: [modelVersionId], references: [id], map: "PromotionRecommendation_modelVersionId_fkey")

  @@index([modelVersionId], map: "PromotionRecommendation_modelVersionId_fkey")
}

model rating {
  id         String   @id
  year       Int
  score      Float
  notes      String?
  karyawanId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  karyawan   karyawan @relation(fields: [karyawanId], references: [id], map: "Rating_karyawanId_fkey")

  @@unique([karyawanId, year], map: "Rating_karyawanId_year_key")
}

model user {
  username  String    @id
  email     String    @unique(map: "User_email_key")
  role      user_role @default(KARYAWAN)
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  karyawan  karyawan?
}

enum karyawan_gender {
  Pria
  Wanita
}

enum user_role {
  KARYAWAN
  HR
}
